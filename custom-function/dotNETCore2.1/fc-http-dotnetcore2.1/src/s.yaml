# ------------------------------------
#   If you need English case, you can refer to [s_en.yaml] file
# ------------------------------------
#   欢迎您使用阿里云函数计算 FC 组件进行项目开发
#   组件仓库地址：https://github.com/devsapp/fc
#   组件帮助文档：https://www.serverless-devs.com/fc/readme
#   Yaml参考文档：https://www.serverless-devs.com/fc/yaml/readme
#   关于：
#      - Serverless Devs和FC组件的关系、如何声明/部署多个函数、超过50M的代码包如何部署
#      - 关于.fcignore使用方法、工具中.s目录是做什么、函数进行build操作之后如何处理build的产物
#   等问题，可以参考文档：https://www.serverless-devs.com/fc/tips
#   关于如何做CICD等问题，可以参考：https://www.serverless-devs.com/serverless-devs/cicd
#   关于如何进行环境划分等问题，可以参考：https://www.serverless-devs.com/serverless-devs/extend
#   更多函数计算案例，可参考：https://github.com/devsapp/awesome/
#   有问题快来钉钉群问一下吧：33947367
# ------------------------------------
edition: 1.0.0
name: hello-world-app
# access 是当前应用所需要的密钥信息配置：
# 密钥配置可以参考：https://www.serverless-devs.com/serverless-devs/command/config
# 密钥使用顺序可以参考：https://www.serverless-devs.com/serverless-devs/tool#密钥使用顺序与规范
access: "{{ access }}"

vars: # 全局变量
  region: "{{ region }}"
  service:
    name: "{{ serviceName }}"
    description: "hello world by serverless devs"

services:
  helloworld: # 业务名称/模块名称
    # 如果只想针对 helloworld 下面的业务进行相关操作，可以在命令行中加上 helloworld，例如：
    # 只对helloworld进行构建：s helloworld build
    # 如果不带有 helloworld ，而是直接执行 s build，工具则会对当前Yaml下，所有和 helloworld 平级的业务模块（如有其他平级的模块，例如下面注释的next-function），按照一定顺序进行 build 操作
    component: fc   # 组件名称，Serverless Devs 工具本身类似于一种游戏机，不具备具体的业务能力，组件类似于游戏卡，用户通过向游戏机中插入不同的游戏卡实现不同的功能，即通过使用不同的组件实现不同的具体业务能力
    actions:        # 自定义执行逻辑，关于actions 的使用，可以参考：https://www.serverless-devs.com/serverless-devs/yaml#行为描述
      pre-deploy:   # 在deploy之前运行
        - run: dotnet publish -c Release -o ./target  # 要执行的系统命令，类似于一种钩子的形式
          path: ./dotnetcore2webapi        # 执行系统命令/钩子的路径
    props:
      region: ${vars.region}         # 关于变量的使用方法，可以参考：https://www.serverless-devs.com/serverless-devs/yaml#变量赋值
      service: ${vars.service}
      function:
        name: "{{ functionName }}"
        description: "hello world by serverless devs"
        runtime: custom
        codeUri: ./dotnetcore2webapi           # 代码位置，即 dotnetApp/*
        layers:        # 层
          - acs:fc:${vars.region}:1431999136518149:layers/Dotnetcore21/versions/1
        customRuntimeConfig:           # 自定义运行时启动配置
          command:                     # 启动指令，示例值: ["/code/myserver"]
            - dotnet
          args:                        # 启动参数，示例值: ["-arg1", "value1"]
            - ./target/dotnetcore2webapi.dll
        memorySize: 128
        timeout: 60
        initializationTimeout: 20
        initializer: "true"   #开启初始化回调
        environmentVariables:  #为dotnetcore2.1 运行时添加运行时环境
          PATH: /opt/dotnet2:/usr/local/bin/apache-maven/bin:/usr/local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/local/ruby/bin
      triggers:
        - name: httpTrigger
          type: http
          config:
            authType: anonymous
            methods:
              - GET
              - POST
              - PUT
              - DELETE
              - HEAD
#  next-function: # 第二个函数的案例，仅供参考
#    # 如果在当前项目下执行 s deploy，会同时部署模块：
#    #   helloworld：服务hello-world-service，函数cpp-event-function
#    #   next-function：服务hello-world-service，函数next-function-example
#    # 如果想单独部署当前服务与函数，可以执行 s + 模块名/业务名 + deploy，例如：s next-function deploy
#    # 如果想单独部署当前函数，可以执行 s + 模块名/业务名 + deploy function，例如：s next-function deploy function
#    # 更多命令可参考：https://www.serverless-devs.com/fc/readme#文档相关
#    component: fc
#    props:
#      region: ${vars.region}
#      service: ${vars.service} # 应用整体的服务配置
#      function: # 定义一个新的函数
#        name: next-function-example
#        description: 'hello world by serverless devs'